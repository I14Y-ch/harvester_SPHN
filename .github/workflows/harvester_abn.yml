name: I14Y Harvester SPHN FDP - ABN

on:
# uncomment the two lines to start automatic harvesting
 # schedule:
 #   - cron: '0 0 * * *'  # Runs every day at midnight
  workflow_dispatch:  # Allows manual triggering

jobs:
  harvest-data:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Get access token
      id: get-token
      env:
        CLIENT_ID: ${{ secrets.CLIENT_ID}} # client ABN
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET}} # secret ABN
      run: |
        python - <<EOF
        import requests
        import os
        import json

        def get_token_without_refresh(client_id,client_secret):
            data = {
                'grant_type': 'client_credentials',
            }
            response = requests.post(
                "https://identity-a.bit.admin.ch/realms/bfs-sis-a/protocol/openid-connect/token", 
                data=data, 
                verify=False, 
                auth=(client_id,client_secret)
              )

            if response.status_code >= 400:
              raise Exception("Failed to get token")
            return response.json()

        client_id = os.environ['CLIENT_ID']
        client_secret = os.environ['CLIENT_SECRET']

        result = get_token_without_refresh(client_id,client_secret)
        
        print(f"::set-output name=access_token::{result['access_token']}")
        EOF

    - name: Run harvester script
      env:
        ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
        API_BASE_URL: "https://api-a.i14y.admin.ch/api/partner/v1" # ABN environement 
      run: python src/harvester.py
    
    - name: Upload log
      uses: actions/upload-artifact@v4
      with:
        name: harvest-log
        path: harvest_log.txt
